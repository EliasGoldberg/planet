// Generated by CoffeeScript 1.10.0
(function() {
  var setCanvasSize;

  $(function() {
    var RADIUS, canvas, diffX, diffY, dragging, engine, gl, octahedron, program, rX, rY, setSize, v0, v1, v2, x, y, z;
    Math.seedrandom('goldberg');
    canvas = setCanvasSize();
    gl = canvas.getContext('webgl2');
    gl.enable(gl.DEPTH_TEST);
    gl.enable(gl.CULL_FACE);
    gl.clearColor(0.1, 0.0, 0.5, 1.0);
    RADIUS = 6370000;
    program = new ShaderProgram(gl);
    program.addShader(gl.VERTEX_SHADER, '#version 300 es\n#define M_PI 3.1415926535897932384626433832795\nin highp vec4 a_Position;\nin vec3 a_Bary;\nin float a_Triangle;\nout vec3 v_Bary;\nout vec3 pos;\nflat out int v_Triangle;\nflat out int v_InstanceId;\nuniform mediump mat4 u_ModelMatrix;\nuniform mediump mat4 u_ViewMatrix;\nuniform mediump mat4 u_ProjMatrix;\n\nmat4 oMat[8] = mat4[](\n  //    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5\n  mat4( 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),      // 0\n  mat4( 0, 0, 1, 0, 0, 1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 1),      // 1\n  mat4(-1, 0, 0, 0, 0, 1, 0, 0, 0, 0,-1, 0, 0, 0, 0, 1),      // 2\n  mat4( 0, 0,-1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1),      // 3\n  mat4(-1, 0, 0, 0, 0,-1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),      // 4\n  mat4( 0, 0,-1, 0, 0,-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 1),      // 5\n  mat4( 1, 0, 0, 0, 0,-1, 0, 0, 0, 0,-1, 0, 0, 0, 0, 1),      // 6\n  mat4( 0, 0, 1, 0, 0,-1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1));     // 7\n\nvoid main() {\n  vec4 pos = a_Position;\n  pos = vec4(normalize(a_Position.xyz),1.0);\n  if (gl_InstanceID < 8) {\n    pos = oMat[gl_InstanceID] * vec4(pos.xyz*float(' + RADIUS.toString() + '),1.0);\n} else {\n  pos = vec4(pos.xyz*float(' + RADIUS.toString() + '),1.0);\n  }\n  pos = u_ProjMatrix * u_ViewMatrix * u_ModelMatrix * pos;\n  gl_Position = pos;\n  v_Bary = a_Bary;\n  v_Triangle = int(a_Triangle);\n  v_InstanceId = gl_InstanceID;\n}');
    program.addShader(gl.FRAGMENT_SHADER, '#version 300 es\n#define M_PI 3.1415926535897932384626433832795\nprecision mediump float;\nin vec3 v_Bary;\nin vec3 pos;\nflat in int v_Triangle;\nflat in int v_InstanceId;\nout vec4 fragcolor;\nuniform mediump vec2 u_discardPile[3];\n\nvec3 colors[8] = vec3[](\n    vec3(1.0,1.0,1.0),   // 0 - white\n    vec3(1.0,1.0,0.0),   // 1 - yellow\n    vec3(1.0,0.0,1.0),   // 2 - purple\n    vec3(1.0,0.0,0.0),   // 3 - red\n    vec3(0.0,1.0,1.0),   // 4 - teal\n    vec3(0.0,1.0,0.0),   // 5 - green\n    vec3(0.0,0.0,1.0),   // 6 - blue\n    vec3(0.0,0.0,0.0));  // 7 - black\n\nfloat edgeFactor(){\n  vec3 d = fwidth(v_Bary);\n  vec3 a3 = smoothstep(vec3(0.0), 1.25*d, v_Bary);\n  return min(min(a3.x, a3.y), a3.z);\n}\n\nvoid main() {\n  if (int(u_discardPile[0].x) == v_InstanceId && int(u_discardPile[0].y) == v_Triangle) discard;\n  vec3 faceColor = colors[v_InstanceId];\n  vec3 wireColor = vec3(0, 0, 0);\n  fragcolor = vec4(mix(wireColor, faceColor, edgeFactor()),1);\n}');
    program.activate();
    setSize = function() {
      var proj;
      gl.viewport(0, 0, canvas.width, canvas.height);
      proj = Matrix.perspective(90, canvas.width / canvas.height, 1, RADIUS * 10);
      return program.setUniformMatrix('u_ProjMatrix', proj.array());
    };
    setSize();
    $(window).resize(function() {
      setCanvasSize();
      return setSize();
    });
    v0 = new Vector([0, 1, 0]);
    v1 = new Vector([0, 0, 1]);
    v2 = new Vector([1, 0, 0]);
    octahedron = new Model(gl, program, [new Face(v0, v1, v2)]);
    octahedron.tessellate(3);
    program.setUniformVectorArray('u_discardPile', [1, 3, 2, 7, 3, 5], 2);
    diffX = 0;
    diffY = 0;
    dragging = false;
    x = 0;
    y = 0;
    rX = 0;
    rY = 0;
    z = RADIUS * 2;
    $(document.body).append('<div id="overlay"></div>');
    $('#overlay').css({
      position: 'fixed',
      color: 'white',
      left: 10 + 'px',
      top: 10 + 'px'
    });
    octahedron.animate = function(elapsed) {
      var c, centroid, model, proj, pvm, view;
      rX += (dragging != null) && dragging ? diffX : 0;
      rY += (dragging != null) && dragging ? diffY : 0;
      model = Matrix.rotation(-rX * 0.4 % 360, 0, 1, 0).multiply(Matrix.rotation(-rY * 0.4 % 360, 1, 0, 0));
      program.setUniformMatrix('u_ModelMatrix', model.array());
      view = Matrix.lookAt([0, 0, z], [0, 0, 0], [0, 1, 0]);
      program.setUniformMatrix('u_ViewMatrix', view.array());
      proj = Matrix.perspective(90, canvas.width / canvas.height, 1, RADIUS * 10);
      pvm = proj.multiply(view).multiply(model);
      c = new Vector([0, 0, z]);
      return centroid = model.multiply(octahedron.faces[0].centroid);
    };
    octahedron.draw = function() {
      return gl.drawElementsInstanced(gl.TRIANGLES, octahedron.indices.length, gl.UNSIGNED_SHORT, 0, 8);
    };
    engine = new Engine(gl);
    engine.addModel(octahedron);
    engine.start();
    $("#gl").mousedown(function(e) {
      x = e.pageX;
      y = e.pageY;
      return dragging = true;
    });
    $("#gl").mousemove(function(e) {
      diffX = x != null ? x - e.pageX : 0;
      diffY = y != null ? y - e.pageY : 0;
      x = e.pageX;
      return y = e.pageY;
    });
    $("#gl").mouseup(function(e) {
      return dragging = false;
    });
    return $('#gl').mousewheel(function(e) {
      var toSurface;
      toSurface = z - RADIUS;
      z = Math.min(Math.max(RADIUS + 2, z + toSurface * e.deltaY * 0.01), 20000000);
      return $('#overlay').text("z: " + (z.toFixed(2)) + ", deltaY: " + e.deltaY + ", to surface: " + ((z - RADIUS).toFixed(2)));
    });
  });

  setCanvasSize = function() {
    var canvas, devicePixelRatio, overdraw, scale;
    canvas = document.getElementById('gl');
    devicePixelRatio = window.devicePixelRatio || 1;
    overdraw = 1;
    scale = devicePixelRatio * overdraw;
    canvas.width = window.innerWidth * scale;
    canvas.height = window.innerHeight * scale;
    canvas.style.width = window.innerWidth + "px";
    canvas.style.height = window.innerHeight + "px";
    return canvas;
  };

}).call(this);

//# sourceMappingURL=main.js.map
