// Generated by CoffeeScript 1.10.0
(function() {
  this.ShaderProgram = (function() {
    function ShaderProgram(gl) {
      this.gl = gl;
      this.id = this.gl.createProgram();
      this.bufferBytes = {};
    }

    ShaderProgram.prototype.addShader = function(type, source) {
      var message, shader;
      shader = this.gl.createShader(type);
      this.gl.shaderSource(shader, source);
      this.gl.compileShader(shader);
      message = this.gl.getShaderInfoLog(shader);
      if ((message != null) && message !== '') {
        console.log(message);
      }
      return this.gl.attachShader(this.id, shader);
    };

    ShaderProgram.prototype.activate = function() {
      var message;
      this.gl.linkProgram(this.id);
      message = this.gl.getProgramInfoLog(this.id);
      if ((message != null) && message !== '') {
        console.log(message);
      }
      return this.gl.useProgram(this.id);
    };

    ShaderProgram.prototype.setAttrib = function(name, value) {
      var attrib;
      attrib = this.gl.getAttribLocation(this.id, name);
      return this.gl["vertexAttrib" + (this.getMethodSuffix(value))](attrib, value);
    };

    ShaderProgram.prototype.setAttribPointer = function(buffer, name, dim, stride, offset) {
      var attrib;
      attrib = this.gl.getAttribLocation(this.id, name);
      this.gl.vertexAttribPointer(attrib, dim, this.gl.FLOAT, false, stride, offset);
      return this.gl.enableVertexAttribArray(attrib);
    };

    ShaderProgram.prototype.setUniform = function(name, value) {
      var uniform;
      uniform = this.gl.getUniformLocation(this.id, name);
      return this.gl["uniform" + (this.getMethodSuffix(value))](uniform, value);
    };

    ShaderProgram.prototype.setUniformVectorArray = function(name, value, dim) {
      var uniform;
      uniform = this.gl.getUniformLocation(this.id, name);
      return this.gl["uniform" + dim + "fv"](uniform, value);
    };

    ShaderProgram.prototype.setUniformArray = function(name, value) {
      var uniform;
      uniform = this.gl.getUniformLocation(this.id, name);
      return this.gl["uniform1fv"](uniform, value);
    };

    ShaderProgram.prototype.setUniformMatrix = function(name, value) {
      var uniform;
      uniform = this.gl.getUniformLocation(this.id, name);
      return this.gl.uniformMatrix4fv(uniform, false, value);
    };

    ShaderProgram.prototype.getMethodSuffix = function(value) {
      var a, isVector, size, type, vee;
      isVector = value.length != null;
      size = isVector ? value.length : 1;
      vee = isVector ? 'v' : '';
      a = isVector ? value : [value];
      type = a.filter(function(v) {
        return v !== Math.max(v);
      }).length === 0 ? 'i' : 'f';
      return "" + size + type + vee;
    };

    return ShaderProgram;

  })();

}).call(this);

//# sourceMappingURL=shaderProgram.js.map
