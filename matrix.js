// Generated by CoffeeScript 1.10.0
(function() {
  this.Matrix = (function() {
    function Matrix(array) {
      this.m = array != null ? array : Matrix.identity().m;
    }

    Matrix.prototype.array = function() {
      return new Float32Array(this.m);
    };

    Matrix.prototype.elements = function() {
      return this.m;
    };

    Matrix.identity = function() {
      return new Matrix([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
    };

    Matrix.rotation = function(angle, x, y, z) {
      var cosB, radian, sinB;
      radian = Math.PI * angle / 180.0;
      cosB = Math.cos(radian);
      sinB = Math.sin(radian);
      return new Matrix([cosB + x * x * (1 - cosB), y * x * (1 - cosB) + z * sinB, z * x * (1 - cosB) - y * sinB, 0.0, x * y * (1 - cosB) - z * sinB, cosB + y * y * (1 - cosB), z * y * (1 - cosB) + x * sinB, 0.0, x * z * (1 - cosB) + y * sinB, y * z * (1 - cosB) - x * sinB, cosB + z * z * (1 - cosB), 0.0, 0.0, 0.0, 0.0, 1.0]);
    };

    Matrix.translation = function(x, y, z) {
      return new Matrix([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0]);
    };

    Matrix.scalation = function(x, y, z) {
      return new Matrix([x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0]);
    };

    Matrix.prototype.rotate = function(angle, x, y, z) {
      return Matrix.rotation(angle, x, y, z).multiply(this);
    };

    Matrix.prototype.translate = function(x, y, z) {
      return Matrix.translation(x, y, z).multiply(this);
    };

    Matrix.prototype.scale = function(x, y, z) {
      return Matrix.scalation(x, y, z).multiply(this);
    };

    Matrix.lookAt = function(eye, center, up) {
      var centerV, eyeV, f, s, u, upV;
      eyeV = new Vector(eye);
      centerV = new Vector(center);
      upV = new Vector(up);
      f = centerV.minus(eyeV).normalize();
      s = f.crossProduct(upV).normalize();
      u = s.crossProduct(f);
      return new Matrix([s.a[0], u.a[0], -f.a[0], 0, s.a[1], u.a[1], -f.a[1], 0, s.a[2], u.a[2], -f.a[2], 0, 0, 0, 0, 1]).translate(-eye[0], -eye[1], -eye[2]);
    };

    Matrix.ortho = function(l, r, b, t, n, f) {
      var rd, rh, rw;
      rw = 1 / (r - l);
      rh = 1 / (t - b);
      rd = 1 / (f - n);
      return new Matrix([2 * rw, 0, 0, 0, 0, 2 * rh, 0, 0, 0, 0, -2 * rd, 0, -(r + l) * rw, -(t + b) * rh, -(f + n) * rd, 1]);
    };

    Matrix.perspective = function(fovy, aspect, near, far) {
      var ct, rd;
      fovy = Math.PI * fovy / 180 / 2;
      rd = 1 / (far - near);
      ct = Math.cos(fovy) / Math.sin(fovy);
      return new Matrix([ct / aspect, 0, 0, 0, 0, ct, 0, 0, 0, 0, -(far + near) * rd, -1, 0, 0, -2 * near * far * rd, 0]);
    };

    Matrix.flatten = function(arrays) {
      if (arrays[0].length > 1) {
        return new Matrix([].concat.apply([], arrays));
      } else {
        return new Vector([arrays[0][0] / arrays[3][0], arrays[1][0] / arrays[3][0], arrays[2][0] / arrays[3][0]]);
      }
    };

    Matrix.prototype.rows = function() {
      var i, j, ref, results;
      results = [];
      for (i = j = 0, ref = this.m.length - 1; j <= ref; i = j += 4) {
        results.push(this.m.slice(i, +(i + 3) + 1 || 9e9));
      }
      return results;
    };

    Matrix.prototype.cols = function() {
      var i, j, results;
      results = [];
      for (i = j = 0; j <= 3; i = ++j) {
        results.push([this.m[i], this.m[i + 4], this.m[i + 8], this.m[i + 12]]);
      }
      return results;
    };

    Matrix.prototype.multiply = function(b) {
      if (b instanceof Matrix) {
        return this.multiplyMatrix(b);
      } else {
        return this.multiplyVector(b);
      }
    };

    Matrix.prototype.multiplyMatrix = function(b) {
      var i, j, r;
      r = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
      for (i = j = 0; j <= 3; i = ++j) {
        r[i] = this.m[i] * b.m[0] + this.m[i + 4] * b.m[1] + this.m[i + 8] * b.m[2] + this.m[i + 12] * b.m[3];
        r[i + 4] = this.m[i] * b.m[4] + this.m[i + 4] * b.m[5] + this.m[i + 8] * b.m[6] + this.m[i + 12] * b.m[7];
        r[i + 8] = this.m[i] * b.m[8] + this.m[i + 4] * b.m[9] + this.m[i + 8] * b.m[10] + this.m[i + 12] * b.m[11];
        r[i + 12] = this.m[i] * b.m[12] + this.m[i + 4] * b.m[13] + this.m[i + 8] * b.m[14] + this.m[i + 12] * b.m[15];
      }
      return new Matrix(r);
    };

    Matrix.prototype.multiplyVector = function(b) {
      var r;
      r = [0, 0, 0, 1];
      r[0] = b.a[0] * this.m[0] + b.a[1] * this.m[4] + b.a[2] * this.m[8] + this.m[12];
      r[1] = b.a[0] * this.m[1] + b.a[1] * this.m[5] + b.a[2] * this.m[9] + this.m[13];
      r[2] = b.a[0] * this.m[2] + b.a[1] * this.m[6] + b.a[2] * this.m[10] + this.m[14];
      r[3] = b.a[0] * this.m[3] + b.a[1] * this.m[7] + b.a[2] * this.m[11] + this.m[15];
      return new Vector([r[0] / r[3], r[1] / r[3], r[2] / r[3]]);
    };

    Matrix.prototype.toString = function() {
      return this.m[0] + ", " + this.m[1] + ", " + this.m[2] + ", " + this.m[3] + "\n" + this.m[4] + ", " + this.m[5] + ", " + this.m[6] + ", " + this.m[7] + "\n" + this.m[8] + ", " + this.m[9] + ", " + this.m[10] + ", " + this.m[11] + "\n" + this.m[12] + ", " + this.m[13] + ", " + this.m[14] + ", " + this.m[15];
    };

    return Matrix;

  })();

}).call(this);

//# sourceMappingURL=matrix.js.map
